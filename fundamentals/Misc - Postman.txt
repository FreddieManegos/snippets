What You SHould Know
 + How to run simple command-line requests
 + General Knowledge
 + HTTP Requests
 + APIs
 + Node Js
 + Continuous Integration
 
 npm install bootstrap --save
 
 Collections - saved requests 
 
 *Contact List APIs
	https://documenter.getpostman.com/view/SWLceUSf?version=latest
	Implement the following APIs
		Get Contact List
		Add Contact 
		Get Contact 
		Update Contact 
		Delete Contact 

 Negative Scenarios 
	Record not found 
	Request is sent with missing required information
	Value has too many characters
	Value has invalid characters 
	Value is not in the correct format
	
 Status Code
 	100 Continue. The client SHOULD continue with its request. ...
	200 OK. The request has succeeded. ...
	203 Non-Authoritative Information. ...
	206 Partial Content. ...
	300 Multiple Choices. ...
	303 See Other. ...
	306 (Unused) ...
	400 Bad Request.


 SpringBoilerplate
	
	Permissions			  ROLE_AUTHENTICATED   ROLE_MAIN     ROLE_ADMIN
		ROLE_WRITE												x
		ROLE_READ												x		
		PERMISSION_WRITE										x		
		PERMISSION_READ											x
		USER_WRITE								x				x	
		USER_READ				x				x				x
		
	Roles	
		ROLE_ADMIN
		ROLE_MAIN
		ROLE_AUTHENTICATED 
	
	Strat
		Users: 
			id: number 
			name: string
			username: string
			status: number 
			verrified: number 
			vkey: 
			created:number
			changed:
			access:
			login:
			mid:
			manageUsers: User[]
			user_roles: Roles[]
			user_meta:
		Role
			rid: number
			name: string
			weight: number
			users_roles: user
				users_rolesid {}
			role_permissions: 
				role_permissionsid {}
				
		Permission 
			pid: number
			name: string 
			role_permissions:
				role_permissionid: {}
		
		Role_Permission
			pid: number
			rid: number
	
	(alias) new User(uid: number, name: string, username: string, status: number, verrified: number, vkey: string, created: number, changed: number, access: number, login: number, mid: string[], manageUsers: string[], user_roles: string[], user_meta: string[]): User
import User
		
	
	{
  "headers": {},
  "body": {
    "user": [
      {
        "uid": 201,
        "name": "Jeff Zeejay Belamide",
        "username": "zeejaybelamide@gmail.com",
        "status": 0,
        "verrified": 1,
        "vkey": null,
        "created": 1598001983,
        "changed": 1598001983,
        "access": 1598001983,
        "login": 1598001983,
        "mid": null,
        "manageUsers": [],
        "users_roles": [],
        "users_meta": []
      }
    ]
  }
}

{
	"username": "freddiemar@gmail.com",
	"password": "T0psecret!"
}

uid
{uid: 203, name: "Freddie Mar Manegos", username: "freddiemar.manegos@g.msuiit.edu.ph", status: 0, verrified: 1, â€¦}
access: 1598010423
changed: 1598010423
created: 1598010423
login: 1598010423
manageUsers: []
mid: null
name: "Freddie Mar Manegos"
status: 0
uid: 203
username: "freddiemar.manegos@g.msuiit.edu.ph"
users_meta: []
users_roles: []
verrified: 1
vkey: null
__proto__: Object


To do Tommorow: 
	Change workflow of Code
	When Register -> Add a Params register=1
		Then Register
	User Verify after getting the code

Add QueryParams
http://localhost:8080/v1/register?register=1 
register 
		
User Verify
http://localhost:8080/v1/verify/vkey/{vkey-id}

users
uid
102
203
103
206 x
205 x
204 x
201 -

Functionality
Users CRUD


